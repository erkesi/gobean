// Code generated by MockGen. DO NOT EDIT.
// Source: ./extension_pointer.go

// Package mock_gextpts is a generated GoMock package.
package gextpts

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExtensionPointer is a mock of ExtensionPointer interface.
type MockExtensionPointer struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionPointerMockRecorder
}

// MockExtensionPointerMockRecorder is the mock recorder for MockExtensionPointer.
type MockExtensionPointerMockRecorder struct {
	mock *MockExtensionPointer
}

// NewMockExtensionPointer creates a new mock instance.
func NewMockExtensionPointer(ctrl *gomock.Controller) *MockExtensionPointer {
	mock := &MockExtensionPointer{ctrl: ctrl}
	mock.recorder = &MockExtensionPointerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionPointer) EXPECT() *MockExtensionPointerMockRecorder {
	return m.recorder
}

// Match mocks base method.
func (m *MockExtensionPointer) Match(ctx context.Context, values ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Match", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockExtensionPointerMockRecorder) Match(ctx interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockExtensionPointer)(nil).Match), varargs...)
}
